buildscript {
    ext {
        springBootVersion = '1.4.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/releases"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

ext.openServiceBrokerVersion = osbversion

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'

/**
 * Escape the placeholders in the application-secrets.yml to prevent Gradle's template expanding to throw
 * `MissingPropertyException` because these placeholders are later used from the OSB to parametrized provisioning
 * templates.
 */
processResources {
    filesMatching("**/application-secrets.yml") { matchedFile ->
        filter { line ->
            line.replace('${', '\\${').replace('$(', '\\$(').replace('$\"', '\\$\"')
        }
    }
    expand(project.properties)
}

war {
    baseName = 'service-broker'
    doFirst {
        manifest {
            attributes("Implementation-Title": project.name, "Implementation-Version": version, "Implementation-Timestamp": new Date())
        }
    }
}

springBoot {
    mainClass = 'com.swisscom.cloud.sb.broker.ServiceBroker'
}

repositories {
    mavenCentral()
}

dependencies {
    compile("com.swisscom.cloud.sb:model:${openServiceBrokerVersion}")
    compile("com.swisscom.cloud.sb:client:${openServiceBrokerVersion}")
    compile("com.swisscom.cloud.sb:broker:${openServiceBrokerVersion}")

    compile('javax.inject:javax.inject:1')

    testCompile("com.swisscom.cloud.sb:model:${openServiceBrokerVersion}:test")
    testCompile("com.swisscom.cloud.sb:client:${openServiceBrokerVersion}:test")
    testCompile("com.swisscom.cloud.sb:broker:${openServiceBrokerVersion}:test")


    testCompile('org.springframework.boot:spring-boot-starter-test:1.4.2.RELEASE')
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4')
    testCompile('cglib:cglib-nodep:3.2.4')
    testCompile('org.spockframework:spock-spring:1.0-groovy-2.4')
}

// Add integration/functional test source sets
sourceSets {
    integrationTest { sourceSet ->
        ["java", "groovy", "scala", "resources"].each {
            if (!sourceSet.hasProperty(it)) return
            sourceSet."$it".srcDir file("src/integration-test/${it}")
        }
    }
    functionalTest { sourceSet ->
        ["java", "groovy", "scala", "resources"].each {
            if (!sourceSet.hasProperty(it)) return
            sourceSet."$it".srcDir file("src/functional-test/${it}")
        }
    }
}

// Setup dependencies for integration testing
dependencies {
    integrationTestCompile sourceSets.main.output
    integrationTestCompile sourceSets.test.output
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime

    functionalTestCompile sourceSets.main.output
    functionalTestCompile sourceSets.test.output
    functionalTestCompile sourceSets.integrationTest.output
    functionalTestCompile configurations.testCompile
    functionalTestRuntime configurations.testRuntime
}

// Define integration test task
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

// Define function test task
task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}

// Make sure 'check' task calls integration test
check.dependsOn integrationTest
integrationTest.mustRunAfter test

// Make sure 'check' task calls functional test
check.dependsOn functionalTest
functionalTest.mustRunAfter integrationTest
